{
  "name": "P#",
  "tagline": "safer asynchronous programming in .NET",
  "body": "P#\r\n====================\r\nA toolkit for **building**, **analyzing** and **systematically testing** asynchronous reactive software, such as web-services and distributed systems.\r\n\r\n## Features\r\nThe P# framework provides:\r\n- Language extensions to C# for building **event-driven asynchronous** applications, writing **test harnesses**, and specifying **safety and liveness properties**.\r\n- A **systematic testing engine** that can capture and control all the specified nondeterminism in the system, and systematically explore the actual executable code to discover bugs.\r\n\r\nAlthough P# primarily targets .NET, it has also experimental support for systematically testing native C++ code.\r\n\r\n## Build instructions\r\n1. Get Visual Studio 2015 (required for Microsoft Roslyn).\r\n2. Clone this project and compile using VS2015.\r\n\r\nOptional: Get the [Visual Studio 2015 SDK](https://www.microsoft.com/en-us/download/details.aspx?id=46850) to be able to compile the P# visual studio extension (syntax highlighting). Only for the high-level P# language.\r\n\r\n## How to use\r\nA good way to start is by reading the [manual](https://github.com/p-org/PSharp/blob/master/Docs/Manual/manual.pdf) (which is not feature complete yet, but please also feel free to contact the P# dev team with specific questions).\r\n\r\n## Compilation\r\nThe P# compiler can be used to parse a P# program, rewrite it to C# and finally compile it to an executable. To invoke the compiler use the following command:\r\n\r\n```\r\n.\\PSharpCompiler.exe /s:${SOLUTION_PATH}\\${SOLUTION_NAME}.sln\r\n```\r\n\r\nWhere ${SOLUTION\\_PATH} is the path to your P# solution and ${SOLUTION\\_NAME} is the name of your P# solution.\r\n\r\nTo specify an output path destination use the option `/o:${OUTPUT\\_PATH}`.\r\n\r\nTo compile only a specific project in the solution use the option `/p:${PROJECT_NAME}`.\r\n\r\nTo compile as a library (dll) use the option `/t:lib`.\r\n\r\nTo compile for testing use the option `/t:test`.\r\n\r\n## Systematic testing\r\nThe P# tester can be used to systematically test a P# program to find safety property and liveness property violations. It can be invoked on a P# program (dll) that was previously compiled using the P# compiler (or some other custom build system). To invoke the tester use the following command:\r\n\r\n```\r\n.\\PSharpTester.exe /test:${DLL_PATH}\\${DLL_NAME}.dll\r\n```\r\n\r\nWhere ${DLL\\_PATH} is the path to your P# program and ${DLL\\_NAME} is the name of your P# program.\r\n\r\nYou can optionally give the number of testing iterations to perform using `/i:value`.\r\n\r\n## Options\r\n\r\nTo see various available command line options for the P# tools use the option `/?`.\r\n\r\n## Contact us\r\n\r\nIf you would like to use P# in your project, or have any specific questions, please feel free to contact one of the following members of the P# team:\r\n- Pantazis Deligiannis (p.deligiannis@imperial.ac.uk)\r\n- Shaz Qadeer (qadeer@microsoft.com)\r\n- Akash Lal (akashl@microsoft.com)\r\n- Cheng Huang (cheng.huang@microsoft.com)\r\n\r\n## Publications\r\n- **[Uncovering Bugs in Distributed Storage Systems During Testing (not in Production!)](https://www.usenix.org/node/194442)**. Pantazis Deligiannis, Matt McCutchen, Paul Thomson, Shuo Chen, Alastair F. Donaldson, John Erickson, Cheng Huang, Akash Lal, Rashmi Mudduluru, Shaz Qadeer and Wolfram Schulte. In the *14th USENIX Conference on File and Storage Technologies* (FAST), 2016.\r\n- **[Asynchronous Programming, Analysis and Testing with State Machines](https://dl.acm.org/citation.cfm?id=2737996)**. Pantazis Deligiannis, Alastair F. Donaldson, Jeroen Ketema, Akash Lal and Paul Thomson. In the *36th Annual ACM SIGPLAN Conference on Programming Language Design and Implementation* (PLDI), 2015.\r\n",
  "google": "UA-60025500-2",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}